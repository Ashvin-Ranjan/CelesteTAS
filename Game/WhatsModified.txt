// Monocle.Engine
protected override void Update(GameTime gameTime)
{
	Engine.RawDeltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;
	for (int i = 0; i < TAS.Manager.FrameLoops; i++)
	{
		Engine.DeltaTime = Engine.RawDeltaTime * Engine.TimeRate * Engine.TimeRateB;
		if (!TAS.Manager.Running || TAS.Manager.Recording)
		{
			MInput.Update();
		}
		TAS.Manager.UpdateInputs();
		if ((TAS.Manager.state & TAS.State.FrameStep) == TAS.State.FrameStep)
		{
			base.Update(gameTime);
			return;
		}
		if (Engine.ExitOnEscapeKeypress && MInput.Keyboard.Pressed(Microsoft.Xna.Framework.Input.Keys.Escape))
		{
			base.Exit();
			return;
		}
		if (Engine.OverloadGameLoop != null)
		{
			Engine.OverloadGameLoop();
			base.Update(gameTime);
			return;
		}
		if (Engine.FreezeTimer > 0f)
		{
			Engine.FreezeTimer = Math.Max(Engine.FreezeTimer - Engine.RawDeltaTime, 0f);
		}
		else if (this.scene != null)
		{
			this.scene.BeforeUpdate();
			this.scene.Update();
			this.scene.AfterUpdate();
		}
		if (Engine.Commands.Open)
		{
			Engine.Commands.UpdateOpen();
		}
		else if (Engine.Commands.Enabled)
		{
			Engine.Commands.UpdateClosed();
		}
		if (this.scene != this.nextScene)
		{
			Scene from = this.scene;
			if (this.scene != null)
			{
				this.scene.End();
			}
			this.scene = this.nextScene;
			this.OnSceneTransition(from, this.nextScene);
			if (this.scene != null)
			{
				this.scene.Begin();
			}
		}
		if (TAS.Manager.FrameLoops < 10)
		{
			base.Update(gameTime);
		}
		if (Engine.Scene.Entities.FindFirst<Celeste.FinalBoss>() != null)
		{
			break;
		}
	}
	if (TAS.Manager.FrameLoops >= 10)
	{
		base.Update(gameTime);
	}
}
---------------------------------------------------------------------------------
// Celeste.RunThread
public static void Start(Action method, string name, bool highPriority = false)
{
	if (TAS.Manager.Running || TAS.Manager.Recording)
	{
		RunThread.RunThreadWithLogging(method);
		return;
	}
	Thread thread = new Thread(delegate()
	{
		RunThread.RunThreadWithLogging(method);
	});
	thread.Name = name;
	thread.IsBackground = true;
	if (highPriority)
	{
		thread.Priority = ThreadPriority.Highest;
	}
	thread.Start();
}
---------------------------------------------------------------------------------
Changed a few fields/methods to public vs private.
Celeste.Player.dashCooldownTimer
Celeste.Player.WallJumpCheck(int dir)
Celeste.SummitVignette.ready
Monocle.MInput.UpdateVirtualInputs()